package handles

import (
	"bytes"
	"log"
	"mime/multipart"
	"net/http"

	"cve-sa-backend/iniconf"

	"github.com/robfig/cron/v3"
)

func Task(c *cron.Cron) error {
	osvId, err := c.AddFunc("0 0 0 * * *", taskOsv)
	if err != nil {
		return err
	}
	log.Printf("register osv task %d", osvId)

	hardwareId, err := c.AddFunc("0 30 0 * * *", taskHardware)
	if err != nil {
		return err
	}
	log.Printf("register hardware task %d", hardwareId)

	driverId, err := c.AddFunc("0 0 1 * * *", taskDriver)
	if err != nil {
		return err
	}
	log.Printf("register driver task %d", driverId)

	return nil
}

func taskOsv() {
	log.Println("start osv")
	defer log.Println("end osv")

	url := "https://cvesa.test.osinfra.cn/cve-security-notice-server/syncOsv"
	var buf = new(bytes.Buffer)
	form := multipart.NewWriter(buf)
	_ = form.WriteField("username", iniconf.Upload.Username)
	_ = form.WriteField("password", iniconf.Upload.Password)
	err := form.Close()
	if err != nil {
		iniconf.SLog.Errorf("multipart close failed, err: %s", err.Error())
		return
	}

	var resp *http.Response
	resp, err = http.Post(url, form.FormDataContentType(), buf)
	if err != nil {
		iniconf.SLog.Errorf("http failed, url:%s err: %s", url, err.Error())
		return
	}

	if resp.StatusCode != http.StatusOK {
		iniconf.SLog.Errorf("request osv failed, status: %d, msg: %s", resp.StatusCode, resp.Status)
		return
	}
}

func taskHardware() {
	log.Println("start hardware")
	defer log.Println("end hardware")

	url := "https://cvesa.test.osinfra.cn/cve-security-notice-server/syncHardware"
	var buf = new(bytes.Buffer)
	form := multipart.NewWriter(buf)
	_ = form.WriteField("username", iniconf.Upload.Username)
	_ = form.WriteField("password", iniconf.Upload.Password)
	err := form.Close()
	if err != nil {
		iniconf.SLog.Errorf("multipart close failed, err: %s", err.Error())
		return
	}

	var resp *http.Response
	resp, err = http.Post(url, form.FormDataContentType(), buf)
	if err != nil {
		iniconf.SLog.Errorf("http failed, url:%s err: %s", url, err.Error())
		return
	}

	if resp.StatusCode != http.StatusOK {
		iniconf.SLog.Errorf("request hardware failed, status: %d, msg: %s", resp.StatusCode, resp.Status)
		return
	}
}

func taskDriver() {
	log.Println("start driver")
	defer log.Println("end driver")

	url := "https://cvesa.test.osinfra.cn/cve-security-notice-server/syncDriver"
	var buf = new(bytes.Buffer)
	form := multipart.NewWriter(buf)
	_ = form.WriteField("username", iniconf.Upload.Username)
	_ = form.WriteField("password", iniconf.Upload.Password)

	err := form.Close()
	if err != nil {
		iniconf.SLog.Errorf("multipart close failed, err: %s", err.Error())
		return
	}

	var resp *http.Response
	resp, err = http.Post(url, form.FormDataContentType(), buf)
	if err != nil {
		iniconf.SLog.Errorf("http failed, url:%s err: %s", url, err.Error())
		return
	}

	if resp.StatusCode != http.StatusOK {
		iniconf.SLog.Errorf("request driver failed, status: %d, msg: %s", resp.StatusCode, resp.Status)
		return
	}
}
